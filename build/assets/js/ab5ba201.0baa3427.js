(self.webpackChunkarcus_background_jobs=self.webpackChunkarcus_background_jobs||[]).push([[377],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(r),d=a,k=p["".concat(c,".").concat(d)]||p[d]||b[d]||i;return r?n.createElement(k,o(o({ref:t},l),{},{components:r})):n.createElement(k,o({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8286:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o=["components"],s={title:"Measure Databricks job run outcomes as metric",layout:"default"},c="Measure Databricks job run outcomes as metric",u={unversionedId:"features/databricks/job-metrics",id:"features/databricks/job-metrics",isDocsHomePage:!1,title:"Measure Databricks job run outcomes as metric",description:"The Arcus.BackgroundJobs.Databricks library provides a background job to repeatedly query for Databricks finished job runs, and reports them as metrics.",source:"@site/docs/features/databricks/job-metrics.md",sourceDirName:"features/databricks",slug:"/features/databricks/job-metrics",permalink:"/next/features/databricks/job-metrics",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/features/databricks/job-metrics.md",version:"current",frontMatter:{title:"Measure Databricks job run outcomes as metric",layout:"default"},sidebar:"tutorialSidebar",previous:{title:"Interact with Databricks to gain insights",permalink:"/next/features/databricks/gain-insights"},next:{title:"Automatically Invalidate Azure Key Vault Secrets",permalink:"/next/features/security/auto-invalidate-secrets"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]}],b={toc:l};function p(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"measure-databricks-job-run-outcomes-as-metric"},"Measure Databricks job run outcomes as metric"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Arcus.BackgroundJobs.Databricks")," library provides a background job to repeatedly query for Databricks ",(0,i.kt)("strong",{parentName:"p"},"finished")," job runs, and reports them as metrics."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 With using our ",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Arcus.Observability.Telemetry.Serilog.Sinks.ApplicationInsights/"},"Arcus.Observability.Telemetry.Serilog.Sinks.ApplicationInsights"),", you can report these Databricks reports as metrics in Application Insights.")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To use these features, you have to install the following package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"PM > Install-Package Arcus.BackgroundJobs.Databricks\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Our background job has to be configured in ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigureServices")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Arcus.Security.Core;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // An \'ISecretProvider\' implementation (see: https://security.arcus-azure.net/) to access the Azure Service Bus Topic resource;\n        //     this will get the \'tokenSecretKey\' string (configured below) and has to retrieve the connection token for the Databricks instance.\n        services.AddSingleton<ISecretProvider>(serviceProvider => ...);\n    \n        // Simplest registration of the scheduler job:\n        services.AddDatabricksJobMetricsJob(\n            baseUrl: "https://url.to.databricks.instance/" \n            // Token secret key to connect to the Databricks token.\n            tokenSecretKey: "Databricks.Token");\n    \n        // Customized registration of the scheduler job:\n        services.AddDatabricksJobMetricsJob(\n            baseUrl: "https://url.to.databricks.instance/" \n            // Token secret key to connect to the Databricks token.\n            tokenSecretKey: "Databricks.Token",\n            options =>\n            {\n                // Setting the name which will be used when reporting the metric for finished Databricks job runs (default: "Databricks Job Completed").\n                options.MetricName = "MyDatabricksJobMetric";\n    \n                // Settings the time interval (in minutes) in which the scheduler job should run (default: 5 minutes). \n                options.IntervalInMinutes = 6;\n            });\n    }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/"},"\u2190"," back")))}p.isMDXComponent=!0}}]);